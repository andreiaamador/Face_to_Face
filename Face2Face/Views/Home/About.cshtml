@using Face2Face.Models
@model LoginViewModel
=======
﻿@*@{
    ViewBag.Title = "About";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<div class="GoogleSearch">

    <div class="pac-card" id="pac-card">
        <div>
            <div id="title">
                Autocomplete search
            </div>
            <div id="type-selector" class="pac-controls">
                <input type="radio" name="type" id="changetype-all" checked="checked">
                <label for="changetype-all">All</label>

                <input type="radio" name="type" id="changetype-establishment">
                <label for="changetype-establishment">Establishments</label>

                <input type="radio" name="type" id="changetype-address">
                <label for="changetype-address">Addresses</label>

                <input type="radio" name="type" id="changetype-geocode">
                <label for="changetype-geocode">Geocodes</label>
            </div>
            <div id="strict-bounds-selector" class="pac-controls">
                <input type="checkbox" id="use-strict-bounds" value="">
                <label for="use-strict-bounds">Strict Bounds</label>
            </div>
        </div>
        <div id="pac-container">
            <input id="pac-input" type="text"
                   placeholder="Enter a location">
        </div>
    </div>
    <div id="map"></div>
    <div id="infowindow-content">
        <img src="" width="16" height="16" id="place-icon">
        <span id="place-name" class="title"></span><br>
        <span id="place-address"></span>
    </div>
>>>>>>> PedroTeste

@{
    ViewBag.Title = "How to Face2Face works:";
}
<h2>@ViewBag.Title</h2>

<style>
    body {
        background-image: url("../../Content/Images/black_background.jpg");
        color: white;
    }
</style>


<div class="">
    <p>
        Here you can book meetings with people you dont't know.
        <br></br>
        You can meet people with the same languages interests as you.
        <br></br>
        You have two ways to do that:
        <br></br>
        You can create your own events and invite people to go on them
        <br></br>
        or
        <br></br>
        You can go to one that already exists.
        <br></br>
        After you attend an event you can give your opinion and also rate the people who organize it.
        <br></br>
        Like the others participants can do the same when you organize an event.
        <br></br>
        You can see Face2Face as an excellent opprtunity to improve your language skills.
    </p>
</div>
<<<<<<< HEAD
=======

    <script>
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 51.509865, lng: -0.118092 },
                zoom: 13
            });
            var card = document.getElementById('pac-card');
            var input = document.getElementById('pac-input');
            var types = document.getElementById('type-selector');
            var strictBounds = document.getElementById('strict-bounds-selector');

            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

            var autocomplete = new google.maps.places.Autocomplete(input);

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var infowindowContent = document.getElementById('infowindow-content');
            infowindow.setContent(infowindowContent);
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindowContent.children['place-icon'].src = place.icon;
                infowindowContent.children['place-name'].textContent = place.name;
                infowindowContent.children['place-address'].textContent = address;
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);

            document.getElementById('use-strict-bounds')
                .addEventListener('click', function () {
                    console.log('Checkbox clicked! New state=' + this.checked);
                    autocomplete.setOptions({ strictBounds: this.checked });
                });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBCrYByZUP81omfmV8Hh9bhsFL1Hx8DCMs&libraries=places&callback=initMap"
            async defer></script>*@

@using Face2Face.Models
@model LoginViewModel

@{
    ViewBag.Title = "How to Face2Face works:";
}
<h2>@ViewBag.Title</h2>

<style>
    body {
        background-image: url("../../Content/Images/black_background.jpg");
        color: white;
    }
</style>


<div class="">
    <p>
        Here you can book meetings with people you dont't know.
        <br></br>
        You can meet people with the same languages interests as you.
        <br></br>
        You have two ways to do that:
        <br></br>
        You can create your own events and invite people to go on them
        <br></br>
        or
        <br></br>
        You can go to one that already exists.
        <br></br>
        After you attend an event you can give your opinion and also rate the people who organize it.
        <br></br>
        Like the others participants can do the same when you organize an event.
        <br></br>
        You can see Face2Face as an excellent opprtunity to improve your language skills.
    </p>
</div>
